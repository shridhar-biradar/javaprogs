1.What is a constructor
  A constructor in Java is a special type of method that is automatically called when an object of a class is created. Its primary purpose is to initialize the newly created object by assigning initial values to its instance variables or performing any other necessary setup. 

2.What is Constructor Chaining
  Constructor chaining in Java refers to the process of one constructor calling another constructor within the same class or in its superclass. This allows you to reuse code and avoid redundancy when multiple constructors share common initialization logic.

3. Can we call a subclass constructor from a superclass constructor
   No, you cannot directly call a subclass constructor from a superclass constructor in Java. Java's constructor chaining works in the opposite direction: a subclass constructor can call a constructor of its superclass using the super keyword, but a superclass constructor cannot call a constructor of its subclass.

4.What happens if you keep a return type for a constructor
  In Java, constructors do not have a return type, including void. If you attempt to declare a return type for a constructor, you will encounter a compilation error, and your code will not compile. This is because constructors are special methods that are used exclusively for creating and initializing objects, and they do not return values like regular methods.

5.What is a No-arg constructor
  A no-arg constructor is a constructor in Java that takes no arguments or parameters.

6.How is a No-argument constructor different from the default Constructor

->No-Argument Constructor (No-arg Constructor):

*A no-argument constructor is a constructor that does not take any arguments or parameters.
*It can be explicitly defined in a class and can perform custom initialization, even if it doesn't take any arguments.
*If you define any constructor in a class, including a no-argument constructor, the default constructor provided by Java is not automatically generated.

->Default Constructor:

*A default constructor is automatically generated by Java if no constructors are explicitly defined in a class.
*It is a no-argument constructor with an empty body (i.e., it doesn't perform any custom initialization).
*Its purpose is to provide a way to create objects of the class without specifying any constructor arguments.
*If you define any constructor (including a no-argument constructor) in a class, the default constructor is not generated by Java.

7.When do we need Constructor Overloading
  Constructor overloading is useful when you want to create objects of a class with different sets of initial values or when you want to provide flexibility in object creation by allowing multiple ways to initialize the object's state. 

8.What is default constructor Explain with an example
    A default constructor in Java is a no-argument constructor that is automatically generated by the Java compiler when no constructors are explicitly defined in a class. It initializes an object with default values or performs no custom initialization. 
eg:public class Person {
    private String name;
    private int age;

    // Default constructor (automatically generated)
    public Person() {
        // No custom initialization
    }

    // Getter and setter methods for 'name' and 'age'
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}
